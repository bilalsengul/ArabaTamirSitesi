//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VTYSProje.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VTYSProjeEntities : DbContext
    {
        public VTYSProjeEntities()
            : base("name=VTYSProjeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Category1> Category1 { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderLİne> OrderLİne { get; set; }
        public virtual DbSet<Producer> Producer { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int SP_ADDCATEGORY(string nAME, string dESCRİPTİON, Nullable<int> bRANDID, Nullable<int> cATEGORY1ID)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dESCRİPTİONParameter = dESCRİPTİON != null ?
                new ObjectParameter("DESCRİPTİON", dESCRİPTİON) :
                new ObjectParameter("DESCRİPTİON", typeof(string));
    
            var bRANDIDParameter = bRANDID.HasValue ?
                new ObjectParameter("BRANDID", bRANDID) :
                new ObjectParameter("BRANDID", typeof(int));
    
            var cATEGORY1IDParameter = cATEGORY1ID.HasValue ?
                new ObjectParameter("CATEGORY1ID", cATEGORY1ID) :
                new ObjectParameter("CATEGORY1ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADDCATEGORY", nAMEParameter, dESCRİPTİONParameter, bRANDIDParameter, cATEGORY1IDParameter);
        }
    
        public virtual int SP_ADDPRODUCT(string nAME, string dESCRİPTİON, string iMAGE, Nullable<int> pRICE, Nullable<int> sTOCK, Nullable<int> iSHOME, Nullable<int> iSAPPROVED, Nullable<int> cATEGORYID)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dESCRİPTİONParameter = dESCRİPTİON != null ?
                new ObjectParameter("DESCRİPTİON", dESCRİPTİON) :
                new ObjectParameter("DESCRİPTİON", typeof(string));
    
            var iMAGEParameter = iMAGE != null ?
                new ObjectParameter("IMAGE", iMAGE) :
                new ObjectParameter("IMAGE", typeof(string));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(int));
    
            var sTOCKParameter = sTOCK.HasValue ?
                new ObjectParameter("STOCK", sTOCK) :
                new ObjectParameter("STOCK", typeof(int));
    
            var iSHOMEParameter = iSHOME.HasValue ?
                new ObjectParameter("ISHOME", iSHOME) :
                new ObjectParameter("ISHOME", typeof(int));
    
            var iSAPPROVEDParameter = iSAPPROVED.HasValue ?
                new ObjectParameter("ISAPPROVED", iSAPPROVED) :
                new ObjectParameter("ISAPPROVED", typeof(int));
    
            var cATEGORYIDParameter = cATEGORYID.HasValue ?
                new ObjectParameter("CATEGORYID", cATEGORYID) :
                new ObjectParameter("CATEGORYID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADDPRODUCT", nAMEParameter, dESCRİPTİONParameter, iMAGEParameter, pRICEParameter, sTOCKParameter, iSHOMEParameter, iSAPPROVEDParameter, cATEGORYIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_UPDATECATEGORY(string nAME, string dESCRİPTİON, Nullable<int> bRANDID, Nullable<int> cATEGORY1ID, Nullable<int> fILTRE)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dESCRİPTİONParameter = dESCRİPTİON != null ?
                new ObjectParameter("DESCRİPTİON", dESCRİPTİON) :
                new ObjectParameter("DESCRİPTİON", typeof(string));
    
            var bRANDIDParameter = bRANDID.HasValue ?
                new ObjectParameter("BRANDID", bRANDID) :
                new ObjectParameter("BRANDID", typeof(int));
    
            var cATEGORY1IDParameter = cATEGORY1ID.HasValue ?
                new ObjectParameter("CATEGORY1ID", cATEGORY1ID) :
                new ObjectParameter("CATEGORY1ID", typeof(int));
    
            var fILTREParameter = fILTRE.HasValue ?
                new ObjectParameter("FILTRE", fILTRE) :
                new ObjectParameter("FILTRE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATECATEGORY", nAMEParameter, dESCRİPTİONParameter, bRANDIDParameter, cATEGORY1IDParameter, fILTREParameter);
        }
    
        public virtual int SP_UPDATEPRODUCT(string nAME, string dESCRİPTİON, string iMAGE, Nullable<int> pRICE, Nullable<int> sTOCK, Nullable<int> iSHOME, Nullable<int> iSAPPROVED, Nullable<int> cATEGORYID, Nullable<int> fILTRE)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dESCRİPTİONParameter = dESCRİPTİON != null ?
                new ObjectParameter("DESCRİPTİON", dESCRİPTİON) :
                new ObjectParameter("DESCRİPTİON", typeof(string));
    
            var iMAGEParameter = iMAGE != null ?
                new ObjectParameter("IMAGE", iMAGE) :
                new ObjectParameter("IMAGE", typeof(string));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(int));
    
            var sTOCKParameter = sTOCK.HasValue ?
                new ObjectParameter("STOCK", sTOCK) :
                new ObjectParameter("STOCK", typeof(int));
    
            var iSHOMEParameter = iSHOME.HasValue ?
                new ObjectParameter("ISHOME", iSHOME) :
                new ObjectParameter("ISHOME", typeof(int));
    
            var iSAPPROVEDParameter = iSAPPROVED.HasValue ?
                new ObjectParameter("ISAPPROVED", iSAPPROVED) :
                new ObjectParameter("ISAPPROVED", typeof(int));
    
            var cATEGORYIDParameter = cATEGORYID.HasValue ?
                new ObjectParameter("CATEGORYID", cATEGORYID) :
                new ObjectParameter("CATEGORYID", typeof(int));
    
            var fILTREParameter = fILTRE.HasValue ?
                new ObjectParameter("FILTRE", fILTRE) :
                new ObjectParameter("FILTRE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATEPRODUCT", nAMEParameter, dESCRİPTİONParameter, iMAGEParameter, pRICEParameter, sTOCKParameter, iSHOMEParameter, iSAPPROVEDParameter, cATEGORYIDParameter, fILTREParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
